#version 430
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable
#extension GL_ARB_shader_image_load_store : enable

struct TerrainCell {
	vec3 normal_NW;
	vec3 normal_SE;
	float height;
};

struct WaterParticle {
	vec3 position;	//  [0, terrain_size]
	vec3 velocity;
	float mass;
};

precision mediump float;

layout( location = 0 ) uniform uint delta = 1;

layout(std430, binding = 1) coherent buffer in_cells{
  WaterParticle particles_in[];
};

layout(std430, binding = 2) coherent buffer out_cells{
  WaterParticle particles_out[];
};

layout(std430, binding = 3) coherent readonly buffer terrain_data{
  TerrainCell terrain[];
};


layout(local_size_x = 30, local_size_y = 30, local_size_z = 1) in;

const int terrain_size = 3600;

//RainDrop controls "resolution" of the watershed. Higher Values == Fatter Rivers
const float rain_drop = .1;
//Determines something
const float ground_bounce = 1;
const float gravity = -9.8 / 30;
const float spawn_height = 1;

//MC controls speed, "viscosity" of flow
const float manning_coeff = 1.f;

highp float random(vec2 co)
{
    highp float a = 12.9898 + float(delta)*.1;
    highp float b = 78.233;
    highp float c = 43758.5453;
    highp float dt= dot(co.xy ,vec2(a,b));
    highp float sn= mod(dt,3.14);
    return abs(fract(sin(sn) * c));
}

uint get_terrain_index(uint x, uint y){
	return x + y*terrain_size;
}

void main() {
	const uint group_size = gl_WorkGroupSize.x + gl_WorkGroupSize.y + gl_WorkGroupSize.z;
	uint index = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * group_size + gl_GlobalInvocationID.z * group_size * group_size;

	WaterParticle particle = particles_in[index];
	TerrainCell ter_cell = terrain[get_terrain_index(uint(particle.position.x), uint(particle.position.y))];
	uint rand_x = gl_GlobalInvocationID.x;
	uint rand_y = gl_GlobalInvocationID.y;

	if( particle.position.x > terrain_size || particle.position.x < terrain_size ||
		particle.position.y > terrain_size || particle.position.y < terrain_size)
		particle.mass = 0;

	if(particle.mass <= 0){
		//Make it rain_drop
		particle.mass = rain_drop * random(vec2(rand_x, rand_y));
		//Randomly position
		particle.position.x = terrain_size * random(vec2(rand_x + delta, rand_y + delta));
		particle.position.y = terrain_size * random(vec2(rand_y - delta, rand_x - delta));
		//Put it above the terrain
		ter_cell = terrain[get_terrain_index(uint(particle.position.x), uint(particle.position.y))];
		particle.position.z = ter_cell.height + spawn_height;
		//Reset velocity
		particle.velocity = vec3(0);
	}
	
	//Apply gravity + Move
	particle.velocity.z += gravity;
	particle.position += particle.velocity;


	/*
	  NW _____ Oppo
		 |  /|
		 | / |
		 |/__|
	Target	   SE
	*/

	
	//Find terrain normal, height of terrain at particles XY position
	float normal_x = fract(particle.position.x);
	float normal_y = fract(particle.position.y);
	vec3 terrain_normal;

	float height_at_position = 0;
	TerrainCell ter_x;
	TerrainCell ter_y;

	if(normal_y > normal_x){
		//Use boolean math if you want to avoid branching.
		terrain_normal = ter_cell.normal_NW;
		ter_x = terrain[get_terrain_index(uint(particle.position.x) + 1, uint(particle.position.y)) + 1];	//Oppo
		ter_y = terrain[get_terrain_index(uint(particle.position.x), uint(particle.position.y)) + 1];		//NW
	}
	else{
		terrain_normal = ter_cell.normal_SE;
		ter_x = terrain[get_terrain_index(uint(particle.position.x) + 1, uint(particle.position.y))];		//SE
		ter_y = terrain[get_terrain_index(uint(particle.position.x) + 1, uint(particle.position.y)) + 1];	//Oppo
	}
	height_at_position = fract(particle.position.y)*(ter_y.height - ter_cell.height) + fract(particle.position.x)*(ter_x.height - ter_cell.height);



	//Check for collision
	if(particle.position.z <= height_at_position){		
		//Collide
		particle.velocity = ground_bounce * (-2. * dot(particle.velocity, terrain_normal) * terrain_normal + particle.velocity);
		particle.position.z = ter_cell.height;
	}
	

	//Take off Evaporation
	//Varies with velocity

	//particle.position = vec3(delta);

	particles_out[index] = particle;
}
